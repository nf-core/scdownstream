/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: '.*:PREPROCESS:ADATA_READRDS' {
        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/converted" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ADATA_UNIFY {
        ext.prefix = { meta.id + '_' + meta.type + '_unified' }

        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/unified" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Empty droplet removal

    withName: '.*:EMPTY_DROPLET_REMOVAL:CELLBENDER_REMOVEBACKGROUND' {
        ext.prefix = { meta.id + '_cellbender' }
        ext.args = { "--epochs ${params.cellbender_epochs}" }

        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/empty_droplet_removal" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Quality control

    withName: QC_RAW {
        ext.prefix = { meta.id + '_raw' }
        ext.section_name = 'unfiltered'

        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/qc_raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('.json') ? null : filename }
        ]
    }

    withName: QC_FILTERED {
        ext.prefix = { meta.id + '_preprocessed' }
        ext.section_name = 'filtered'

        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/qc_preprocessed" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('.json') ? null : filename }
        ]
    }

    // Ambient RNA removal

    withName: CELDA_DECONTX {
        ext.prefix = { meta.id + '_decontx' }

        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/ambient_rna_removal" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:AMBIENT_RNA_REMOVAL:CELLBENDER_REMOVEBACKGROUND' {
        ext.prefix = { meta.id + '_cellbender' }
        ext.args = { "--epochs ${params.cellbender_epochs}" }

        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/ambient_rna_removal" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SOUPX {
        ext.prefix = { meta.id + '_soupX' }

        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/ambient_rna_removal" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Custom filtering

    withName: SCANPY_FILTER {
        ext.prefix = { meta.id + '_filtered' }

        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/custom_thresholds" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Doublet detection

    withName: '.*:DOUBLET_DETECTION:ADATA_TORDS' {
        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/doublet_detection/input_rds" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SCVITOOLS_SOLO {
        ext.prefix = { meta.id + '_solo' }

        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/doublet_detection/solo" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SCANPY_SCRUBLET {
        ext.prefix = { meta.id + '_scrublet' }

        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/doublet_detection/scrublet" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DOUBLETDETECTION {
        ext.prefix = { meta.id + '_doubletdetection' }

        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/doublet_detection/doubletdetection" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SCDS {
        ext.prefix = { meta.id + '_scds' }

        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/doublet_detection/scds" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DOUBLET_REMOVAL {
        publishDir = [
            path: { "${params.outdir}/preprocess/${meta.id}/doublet_detection" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('.json') ? null : filename }
        ]
    }

    // Merge datasets

    withName: ADATA_MERGE {
        publishDir = [
            path: { "${params.outdir}/combine/merge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ADATA_UPSETGENES {
        publishDir = [
            path: { "${params.outdir}/combine/merge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('.json') ? null : filename }
        ]
    }

    // Prepare integration

    withName: SCANPY_HVGS {
        publishDir = [
            path: { "${params.outdir}/combine/integrate/input_hvg" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:INTEGRATE:ADATA_TORDS' {
        publishDir = [
            path: { "${params.outdir}/combine/integrate/input_hvg" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Integration

    withName: SCVITOOLS_SCVI {
        ext.prefix = { meta.id + '_scvi' }

        publishDir = [
            path: { "${params.outdir}/combine/integrate/scvi" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SCVITOOLS_SCANVI {
        ext.prefix = { meta.id + '_scanvi' }

        publishDir = [
            path: { "${params.outdir}/combine/integrate/scanvi" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: INTEGRATION_HARMONY {
        publishDir = [
            path: { "${params.outdir}/combine/integrate/harmony" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: INTEGRATION_BBKNN {
        publishDir = [
            path: { "${params.outdir}/combine/integrate/bbknn" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SCANPY_COMBAT {
        publishDir = [
            path: { "${params.outdir}/combine/integrate/combat" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Celltype assignment

    withName: CELLTYPES_CELLTYPIST {
        ext.prefix = { meta.id + '_celltypist' }

        publishDir = [
            path: { "${params.outdir}/celltypes/celltypist" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Clustering

    withName: SCANPY_NEIGHBORS {
        ext.prefix = { meta.id + '_neighbors' }

        publishDir = [
            path: { "${params.outdir}/cluster_dimred/${meta.integration}/neighbors" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SCANPY_LEIDEN {
        ext.prefix = { meta.id + '_leiden' }

        publishDir = [
            path: { "${params.outdir}/cluster_dimred/${meta.integration}/leiden/${meta.resolution}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SCANPY_UMAP {
        ext.prefix = { meta.id + '_umap' }

        publishDir = [
            path: { "${params.outdir}/cluster_dimred/${meta.integration}/umap" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Finalize

    withName: '.*:FINALIZE:ADATA_EXTEND' {
        publishDir = [
            path: { "${params.outdir}/finalized" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:FINALIZE:ADATA_TORDS' {
        publishDir = [
            path: { "${params.outdir}/finalized" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // MultiQC

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
